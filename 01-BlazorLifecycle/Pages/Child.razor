<h5> Child: </h5>
<h6>Counter: @Counter</h6>
<button @onclick="StartTimer"> Start Timer </button>
<h4>Following are the life cycle events called as per the order of execution.</h4>
<br />
@foreach (var item in Events)
{
    <h6>@item</h6>
    <br />
}

@code {
    [Parameter]
    public int Counter { get; set; }
    List<string> Events = new();

    private void StartTimer()
    {
        Timer timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    private void TimeCallBack(object? state)
    {
        _ = InvokeAsync(() =>
        {
            if (Counter < 5)
            {
                Counter++;
                Console.WriteLine("Counter " + Counter);
                StateHasChanged();
            }
        });
    }

    /* OnInitialized 和 OnInitializedAsync 在组件被渲染前调用 */
    protected override void OnInitialized()
    {
        Events.Add($"1. {nameof(OnInitialized)}");
    }

    protected override async Task OnInitializedAsync()
    {
        Events.Add($"2. {nameof(OnInitializedAsync)}");
        await Task.Delay(1000);
    }

    /*
    * OnParametersSet 和 OnParametersSetAsync
    * 1. 每次从父组件收到新参数时会被调用；
    * 2. 组件首次加载时会在 OnInitialized() 和 OnInitializedAsync() 之后立即调用；
    */
    protected override void OnParametersSet()
    {
        Events.Add("3. OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        Events.Add("4. OnParametersSetAsync");
        await Task.Delay(1000);
    }

    /*
    * OnAfterRender 和 OnAfterRenderAsync 在组件已经渲染并更新到UI上后执行，
    * 此时可能还没有渲染完全，因此应该避免在OnAfterRender执行期间获取UI元素的几何属性。
    */
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Events.Add("5. OnAfterRender: first render");
        }
        else
        {
            Events.Add("5. OnAfterRender: after first render");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Events.Add("6. OnAfterRenderAsync: first render");
        }
        else
        {
            Events.Add("6. OnAfterRenderAsync: after first render");
        }
        await Task.Delay(1000);
    }
}
